'use strict';
var Promise = require('bluebird'),
    hash = require('object-hash');

var ttl = 60000;
var purgeTimeout = null;

function createLink(address, options, type, method) {
  var self = this;
  var linkHash = hash({ type: type, address: address, options: options });
  if ({}.hasOwnProperty.call(self.links, linkHash)) {
    var entry = self.links[linkHash];
    if (!{}.hasOwnProperty.call(entry, 'link'))
      return entry;

    self.links[linkHash].stamp = Date.now();
    return Promise.resolve(self.links[linkHash].link);
  }

  var linkPromise = method(address, options)
    .then(function(link) {
      link.once('detached', function() {
        if ({}.hasOwnProperty.call(self.links, linkHash))
          delete self.links[linkHash];
      });

      self.links[linkHash] = { link: link, stamp: Date.now() };
      if (!purgeTimeout)
        purgeTimeout = setTimeout(function() {
          purgeLinks.call(self);
        }, ttl);
      return link;
    });

  self.links[linkHash] = linkPromise;
  return linkPromise;
}

function purgeLinks() {
  var self = this;
  if (!self || !{}.hasOwnProperty.call(self, 'links')) {
    return;
  }
  var now = Date.now();
  var _keys = Object.keys(self.links),
      expired = [], live = 0;

  purgeTimeout = null;
  for (var i = 0, ii = _keys.length; i < ii; ++i) {
    if (now - this.links[_keys[i]].stamp >= ttl) {
      expired.push(_keys[i]);
    } else {
      live++;
    }
  }

  for (var j = 0, jj = expired.length; j < jj; ++j) {
    var cacheEntry = self.links[expired[j]];
    delete self.links[expired[j]];
    cacheEntry.link.detach();
  }

  if (live) {
    purgeTimeout = setTimeout(purgeLinks, ttl);
  }
}

module.exports = function(options) {
  // NOTE: we need to re-initialize these every time the plugin is called
  options = options || {};
  ttl = options.ttl || 60000;
  if (!!purgeTimeout) clearTimeout(purgeTimeout);
  purgeTimeout = null;

  return function(Client) {
    var _createSender = Client.prototype.createSender,
        _createReceiver = Client.prototype.createReceiver,
        _createSenderStream = Client.prototype.createSenderStream,
        _createReceiverStream = Client.prototype.createReceiverStream;

    var init = function() {
      if (!{}.hasOwnProperty.call(this, 'links')) {
        this.links = {};
      }
    };

    Client.prototype.createSender = function(address, options) {
      var self = this;
      init.apply(self);
      return createLink.apply(
          self, [address, options, 'sender', _createSender.bind(self)]);
    };

    Client.prototype.createReceiver = function(address, options) {
      var self = this;
      init.apply(self);
      return createLink.apply(
        self, [address, options, 'receiver', _createReceiver.bind(self)]);
    };

    Client.prototype.createSenderStream = function(address, options) {
      var self = this;
      init.apply(self);
      return createLink.apply(
        address, [options, 'senderStream', _createSenderStream.bind(self)]);
    };

    Client.prototype.createReceiverStream = function(address, options) {
      var self = this;
      init.apply(self);
      return createLink.apply(
        address, [options, 'receiverStream', _createReceiverStream.bind(self)]);
    };
  };
};
